package com.penzov.objectdetectorapp

import android.content.Context
import android.graphics.*
import android.util.AttributeSet
import android.view.View
import kotlin.math.abs

class OverlayView @JvmOverloads constructor(
    context: Context, attrs: AttributeSet? = null
) : View(context, attrs) {

    private val paintBox = Paint().apply {
        strokeWidth = 4f
        style = Paint.Style.STROKE
    }

    private val paintText = Paint().apply {
        color = Color.WHITE
        textSize = 40f
        style = Paint.Style.FILL
        isAntiAlias = true
        typeface = Typeface.DEFAULT_BOLD
    }

    private val paintTime = Paint().apply {
        color = Color.LTGRAY
        textSize = 20f // –º–∞–ª–µ–Ω—å–∫–∏–π —à—Ä–∏—Ñ—Ç
        style = Paint.Style.FILL
        isAntiAlias = true
        setShadowLayer(2f, 1f, 1f, Color.BLACK)
    }

    // üß† –•—Ä–∞–Ω—é —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–Ω—É—Ç—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –≤—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    private var boxes: List<TrackedBox> = emptyList()
    private var inferenceTimeMs: Long = 0

    // üé® –ö—ç—à —Ü–≤–µ—Ç–æ–≤ –ø–æ trackId, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –±—ã–ª —Å–≤–æ–∏–º —Ü–≤–µ—Ç–æ–º
    private val trackColors = mutableMapOf<Int, Int>()

    fun setBoxes(boxes: List<TrackedBox>, inferenceTimeMs: Long) {
        this.boxes = boxes
        this.inferenceTimeMs = inferenceTimeMs
        invalidate()
    }

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)

        for (box in boxes) {
            val left = box.x * width
            val top = box.y * height
            val right = (box.x + box.width) * width
            val bottom = (box.y + box.height) * height

            // üé® –ü–æ–ª—É—á–∞—é —Ü–≤–µ—Ç –¥–ª—è —Ç—Ä–µ–∫–∞
            paintBox.color = getColorForTrack(box.trackId)

            // üü• –†–∏—Å—É—é —Ä–∞–º–∫—É
            canvas.drawRect(left, top, right, bottom, paintBox)

            // üè∑ –ú–µ—Ç–∫–∞ + % + ID
            val label = "${box.label} ${(box.confidence * 100).toInt()}% (#${box.trackId})"
            canvas.drawText(label, left + 4, top - 10, paintText)
        }

        // ‚è± –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        val timeText = "‚è± ${inferenceTimeMs} ms"
        val textWidth = paintTime.measureText(timeText)
        canvas.drawText(timeText, width - textWidth - 16f, height - 12f, paintTime)
    }

    // üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ trackId (–≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π)
    private fun getColorForTrack(trackId: Int): Int {
        return trackColors.getOrPut(trackId) {
            val hue = (trackId * 57) % 360 // —Ä–∞–∑–Ω—ã–π —É–≥–æ–ª –æ—Ç—Ç–µ–Ω–∫–∞
            Color.HSVToColor(floatArrayOf(hue.toFloat(), 0.8f, 1f))
        }
    }
}


