package com.penzov.objectdetectorapp

import android.os.Bundle
import android.util.Log
import android.widget.FrameLayout
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.content.ContextCompat
import com.penzov.objectdetectorapp.ui.theme.ObjectDetectorAppTheme
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var cameraExecutor: ExecutorService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("DEBUG", "üöÄ MainActivity –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")

        cameraExecutor = Executors.newSingleThreadExecutor()

        setContent {
            ObjectDetectorAppTheme {
                Surface(modifier = Modifier.fillMaxSize()) {
                    DetectorUI()
                }
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }
}

@Composable
fun DetectorUI() {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current

    val models = mapOf(
        "–ü–ª–æ—Ö–æ–µ –∑—Ä–µ–Ω–∏–µ" to ("model_blind.tflite" to "labels_blind.txt"),
        "–î–µ—Ç–∏" to ("model_child.tflite" to "labels_child.txt"),
        "–ü–æ–∂–∏–ª—ã–µ" to ("model_pensioner.tflite" to "labels_pensioner.txt"),
        "–¢–µ—Å—Ç" to ("model_test.tflite" to "labels_test.txt")
    )

    var selectedLabel by remember { mutableStateOf(models.keys.first()) }
    val (modelName, labelName) = models[selectedLabel]!!

    var outputText by remember { mutableStateOf("–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...") }
    var boundingBoxes by remember { mutableStateOf(listOf<BoundingBox>()) }

    // –í —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ—Ö—Ä–∞–Ω—è—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ OverlayView
    var inferenceTime by remember { mutableStateOf(0L) }

    // –ó–∞–≥—Ä—É–∂–∞—é –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å –∏ labels, –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Å—å –Ω–∞ –∫–æ–ª–ª–±—ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    val classifier = remember(modelName) {
        YoloV8Classifier(
            context = context,
            modelPath = modelName,
            labelPath = labelName,
            onResult = { boxes, timeMs ->
                boundingBoxes = boxes
                inferenceTime = timeMs // —Å–æ—Ö—Ä–∞–Ω—è—é –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                outputText = "‚è± ${timeMs}–º—Å, –û–±—ä–µ–∫—Ç–æ–≤: ${boxes.size}"
            },
            onEmpty = {
                boundingBoxes = emptyList()
                inferenceTime = 0L
                outputText = "‚è± –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤"
            }
        )
    }

    Column(modifier = Modifier.fillMaxSize().padding(8.dp)) {
        Box(modifier = Modifier.fillMaxWidth()) {
            var expanded by remember { mutableStateOf(false) }

            Button(onClick = { expanded = !expanded }, modifier = Modifier.fillMaxWidth()) {
                Text(text = selectedLabel)
            }

            DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
                models.keys.forEach {
                    DropdownMenuItem(
                        text = { Text(it) },
                        onClick = {
                            selectedLabel = it
                            expanded = false
                        }
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(8.dp))

        // –ö–∞–º–µ—Ä–∞ + Overlay —Å–ª–æ–π, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –±–æ–∫—Å—ã –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å-–≤—Ä–µ–º—è
        AndroidView(
            factory = { ctx ->
                val previewView = PreviewView(ctx)
                val overlay = OverlayView(ctx)

                val frameLayout = FrameLayout(ctx).apply {
                    addView(previewView)
                    addView(overlay)
                }

                val cameraProviderFuture = ProcessCameraProvider.getInstance(ctx)
                cameraProviderFuture.addListener({
                    val cameraProvider = cameraProviderFuture.get()
                    val preview = Preview.Builder().build().apply {
                        setSurfaceProvider(previewView.surfaceProvider)
                    }

                    val analyzer = ImageAnalysis.Builder()
                        .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                        .build()

                    analyzer.setAnalyzer(ContextCompat.getMainExecutor(ctx)) { imageProxy ->
                        val bitmap = previewView.bitmap
                        if (bitmap != null) {
                            // –ó–∞–ø—É—Å–∫–∞—é –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ –∫–∞–¥—Ä–µ
                            classifier.runInference(bitmap)
                            // –ü–µ—Ä–µ–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—Ä–µ–º—è –≤ OverlayView
                            overlay.setBoxes(boundingBoxes, inferenceTime)
                        }
                        imageProxy.close()
                    }

                    try {
                        cameraProvider.unbindAll()
                        cameraProvider.bindToLifecycle(
                            lifecycleOwner,
                            CameraSelector.DEFAULT_BACK_CAMERA,
                            preview,
                            analyzer
                        )
                    } catch (exc: Exception) {
                        Log.e("CameraX", "–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã", exc)
                    }
                }, ContextCompat.getMainExecutor(ctx))

                frameLayout
            },
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f)
        )

        Spacer(modifier = Modifier.height(8.dp))

        // –í—ã–≤–æ–∂—É —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        Text(
            text = outputText,
            style = MaterialTheme.typography.labelSmall,
            modifier = Modifier.fillMaxWidth()
        )
    }
}



