package com.penzov.objectdetectorapp

import android.content.Context
import android.graphics.Bitmap
import android.os.SystemClock
import android.util.Log
import org.tensorflow.lite.DataType
import org.tensorflow.lite.Interpreter
import org.tensorflow.lite.gpu.CompatibilityList
import org.tensorflow.lite.gpu.GpuDelegate
import org.tensorflow.lite.support.common.FileUtil
import org.tensorflow.lite.support.common.ops.CastOp
import org.tensorflow.lite.support.common.ops.NormalizeOp
import org.tensorflow.lite.support.image.ImageProcessor
import org.tensorflow.lite.support.image.TensorImage
import org.tensorflow.lite.support.tensorbuffer.TensorBuffer

class YoloV8Classifier(
    private val context: Context,
    private val modelPath: String,
    private val labelPath: String,
    private val onResult: (List<BoundingBox>, Long) -> Unit,
    private val onEmpty: () -> Unit
) {

    private var interpreter: Interpreter
    private var labels = listOf<String>()

    private var tensorWidth = 0
    private var tensorHeight = 0
    private var numChannel = 0
    private var numElements = 0

    private val imageProcessor = ImageProcessor.Builder()
        .add(NormalizeOp(0f, 255f))
        .add(CastOp(DataType.FLOAT32))
        .build()

    init {
        Log.d("ClassifierInit", "üß† –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
        Log.d("ClassifierInit", "üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: $modelPath")
        Log.d("ClassifierInit", "üìÉ –ó–∞–≥—Ä—É–∂–∞–µ–º labels: $labelPath")

        val compatList = CompatibilityList()
        val options = Interpreter.Options().apply {
            if (compatList.isDelegateSupportedOnThisDevice) {
                val delegateOptions = compatList.bestOptionsForThisDevice
                addDelegate(GpuDelegate(delegateOptions))
                Log.d("ClassifierInit", "‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU")
            } else {
                setNumThreads(4)
                Log.d("ClassifierInit", "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ CPU")
            }
        }

        val model = FileUtil.loadMappedFile(context, modelPath)
        interpreter = Interpreter(model, options)
        Log.d("ClassifierInit", "‚úÖ Interpreter —Å–æ–∑–¥–∞–Ω")

        val inputShape = interpreter.getInputTensor(0).shape()
        val outputShape = interpreter.getOutputTensor(0).shape()
        tensorWidth = inputShape[1]
        tensorHeight = inputShape[2]

        numChannel = outputShape[1]
        numElements = outputShape[2]

        labels = FileUtil.loadLabels(context, labelPath)
    }

    fun runInference(bitmap: Bitmap) {
        val start = SystemClock.uptimeMillis()

        val resizedBitmap = Bitmap.createScaledBitmap(bitmap, tensorWidth, tensorHeight, false)
        val tensorImage = TensorImage(DataType.FLOAT32).apply {
            load(resizedBitmap)
        }
        val processedImage = imageProcessor.process(tensorImage)

        val output = TensorBuffer.createFixedSize(
            intArrayOf(1, numChannel, numElements), DataType.FLOAT32
        )
        interpreter.run(processedImage.buffer, output.buffer)

        val result = processOutput(output.floatArray)
        val duration = SystemClock.uptimeMillis() - start

        if (result.isEmpty()) {
            onEmpty()
        } else {
            onResult(result, duration)
        }
    }

    private fun processOutput(array: FloatArray): List<BoundingBox> {
        val boxes = mutableListOf<BoundingBox>()

        for (i in 0 until numElements) {
            var maxConf = CONFIDENCE_THRESHOLD
            var maxIdx = -1
            var j = 4
            var arrayIdx = i + numElements * j
            while (j < numChannel) {
                if (array[arrayIdx] > maxConf) {
                    maxConf = array[arrayIdx]
                    maxIdx = j - 4
                }
                j++
                arrayIdx += numElements
            }

            if (maxIdx != -1) {
                val cx = array[i]
                val cy = array[i + numElements]
                val w = array[i + numElements * 2]
                val h = array[i + numElements * 3]

                val x1 = cx - w / 2
                val y1 = cy - h / 2

                if (x1 in 0f..1f && y1 in 0f..1f && (x1 + w) in 0f..1f && (y1 + h) in 0f..1f) {
                    val labelEn = labels.getOrElse(maxIdx) { "unknown" }
                    // üí¨ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                    val labelRu = labelTranslations[labelEn] ?: labelEn
                    boxes.add(
                        BoundingBox(
                            x = x1,
                            y = y1,
                            width = w,
                            height = h,
                            confidence = maxConf,
                            classId = maxIdx,
                            label = labelRu
                        )
                    )
                }
            }
        }

        return applyNMS(boxes)
    }

    private fun applyNMS(boxes: List<BoundingBox>): List<BoundingBox> {
        val sorted = boxes.sortedByDescending { it.confidence }.toMutableList()
        val selected = mutableListOf<BoundingBox>()

        while (sorted.isNotEmpty()) {
            val first = sorted.removeAt(0)
            selected.add(first)

            val iter = sorted.iterator()
            while (iter.hasNext()) {
                val next = iter.next()
                if (iou(first, next) >= IOU_THRESHOLD) {
                    iter.remove()
                }
            }
        }

        return selected
    }

    private fun iou(a: BoundingBox, b: BoundingBox): Float {
        val x1 = maxOf(a.x, b.x)
        val y1 = maxOf(a.y, b.y)
        val x2 = minOf(a.x2, b.x2)
        val y2 = minOf(a.y2, b.y2)

        val interWidth = maxOf(0f, x2 - x1)
        val interHeight = maxOf(0f, y2 - y1)
        val interArea = interWidth * interHeight

        val areaA = a.width * a.height
        val areaB = b.width * b.height

        return interArea / (areaA + areaB - interArea)
    }

    // üî† –ó–¥–µ—Å—å —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –º–µ—Ç–æ–∫ (–æ–¥–∏–Ω —Ä–∞–∑ –≤—Å—Ç—Ä–æ–µ–Ω –≤–Ω—É—Ç—Ä—å –∫–ª–∞—Å—Å–∞)
    private val labelTranslations = mapOf(
        "person" to "—á–µ–ª–æ–≤–µ–∫",
        "bicycle" to "–≤–µ–ª–æ—Å–∏–ø–µ–¥",
        "car" to "–º–∞—à–∏–Ω–∞",
        "motorcycle" to "–º–æ—Ç–æ—Ü–∏–∫–ª",
        "airplane" to "—Å–∞–º–æ–ª—ë—Ç",
        "bus" to "–∞–≤—Ç–æ–±—É—Å",
        "train" to "–ø–æ–µ–∑–¥",
        "truck" to "–≥—Ä—É–∑–æ–≤–∏–∫",
        "boat" to "–ª–æ–¥–∫–∞",
        "traffic light" to "—Å–≤–µ—Ç–æ—Ñ–æ—Ä",
        "fire hydrant" to "–ø–æ–∂–∞—Ä–Ω—ã–π –≥–∏–¥—Ä–∞–Ω—Ç",
        "stop sign" to "–∑–Ω–∞–∫ —Å—Ç–æ–ø",
        "parking meter" to "–ø–∞—Ä–∫–æ–º–∞—Ç",
        "bench" to "–ª–∞–≤–æ—á–∫–∞",
        "bird" to "–ø—Ç–∏—Ü–∞",
        "cat" to "–∫–æ—à–∫–∞",
        "dog" to "—Å–æ–±–∞–∫–∞",
        "horse" to "–ª–æ—à–∞–¥—å",
        "sheep" to "–æ–≤—Ü–∞",
        "cow" to "–∫–æ—Ä–æ–≤–∞",
        "elephant" to "—Å–ª–æ–Ω",
        "bear" to "–º–µ–¥–≤–µ–¥—å",
        "zebra" to "–∑–µ–±—Ä–∞",
        "giraffe" to "–∂–∏—Ä–∞—Ñ",
        "backpack" to "—Ä—é–∫–∑–∞–∫",
        "umbrella" to "–∑–æ–Ω—Ç",
        "handbag" to "—Å—É–º–æ—á–∫–∞",
        "tie" to "–≥–∞–ª—Å—Ç—É–∫",
        "suitcase" to "—á–µ–º–æ–¥–∞–Ω",
        "frisbee" to "—Ñ—Ä–∏—Å–±–∏",
        "skis" to "–ª—ã–∂–∏",
        "snowboard" to "—Å–Ω–æ—É–±–æ—Ä–¥",
        "sports ball" to "–º—è—á",
        "kite" to "–≤–æ–∑–¥—É—à–Ω—ã–π –∑–º–µ–π",
        "baseball bat" to "–±–µ–π—Å–±–æ–ª—å–Ω–∞—è –±–∏—Ç–∞",
        "baseball glove" to "–±–µ–π—Å–±–æ–ª—å–Ω–∞—è –ø–µ—Ä—á–∞—Ç–∫–∞",
        "skateboard" to "—Å–∫–µ–π—Ç–±–æ—Ä–¥",
        "surfboard" to "–¥–æ—Å–∫–∞ –¥–ª—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞",
        "tennis racket" to "—Ç–µ–Ω–Ω–∏—Å–Ω–∞—è —Ä–∞–∫–µ—Ç–∫–∞",
        "bottle" to "–±—É—Ç—ã–ª–∫–∞",
        "wine glass" to "–±–æ–∫–∞–ª",
        "cup" to "—á–∞—à–∫–∞",
        "fork" to "–≤–∏–ª–∫–∞",
        "knife" to "–Ω–æ–∂",
        "spoon" to "–ª–æ–∂–∫–∞",
        "bowl" to "–º–∏—Å–∫–∞",
        "banana" to "–±–∞–Ω–∞–Ω",
        "apple" to "—è–±–ª–æ–∫–æ",
        "sandwich" to "–±—É—Ç–µ—Ä–±—Ä–æ–¥",
        "orange" to "–∞–ø–µ–ª—å—Å–∏–Ω",
        "broccoli" to "–±—Ä–æ–∫–∫–æ–ª–∏",
        "carrot" to "–º–æ—Ä–∫–æ–≤—å",
        "hot dog" to "—Ö–æ—Ç-–¥–æ–≥",
        "pizza" to "–ø–∏—Ü—Ü–∞",
        "donut" to "–ø–æ–Ω—á–∏–∫",
        "cake" to "—Ç–æ—Ä—Ç",
        "chair" to "—Å—Ç—É–ª",
        "couch" to "–¥–∏–≤–∞–Ω",
        "potted plant" to "–≥–æ—Ä—à–µ—á–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
        "bed" to "–∫—Ä–æ–≤–∞—Ç—å",
        "dining table" to "–æ–±–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª",
        "toilet" to "—Ç—É–∞–ª–µ—Ç",
        "tv" to "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
        "laptop" to "–Ω–æ—É—Ç–±—É–∫",
        "mouse" to "–º—ã—à–∫–∞",
        "remote" to "–ø—É–ª—å—Ç",
        "keyboard" to "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
        "cell phone" to "—Ç–µ–ª–µ—Ñ–æ–Ω",
        "microwave" to "–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞",
        "oven" to "–¥—É—Ö–æ–≤–∫–∞",
        "toaster" to "—Ç–æ—Å—Ç–µ—Ä",
        "sink" to "—Ä–∞–∫–æ–≤–∏–Ω–∞",
        "refrigerator" to "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
        "book" to "–∫–Ω–∏–≥–∞",
        "clock" to "—á–∞—Å—ã",
        "vase" to "–≤–∞–∑–∞",
        "scissors" to "–Ω–æ–∂–Ω–∏—Ü—ã",
        "teddy bear" to "–ø–ª—é—à–µ–≤—ã–π –º–µ–¥–≤–µ–¥—å",
        "hair drier" to "—Ñ–µ–Ω",
        "toothbrush" to "–∑—É–±–Ω–∞—è —â—ë—Ç–∫–∞",
        "cliff" to "—É—Ç—ë—Å",
        "edge-of-a-pond" to "–∫—Ä–∞–π –≤–æ–¥–æ–µ–º–∞",
        "edge-of-the-sidewalk" to "–±–æ—Ä–¥—é—Ä",
        "fence" to "–∑–∞–±–æ—Ä",
        "green-traffic-light-pedestrian" to "–∑–µ–ª—ë–Ω—ã–π —Å–≤–µ—Ç –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–∞",
        "hatch" to "–ª—é–∫",
        "pedestrian-sign" to "–∑–Ω–∞–∫ –ø–µ—à–µ—Ö–æ–¥–∞",
        "railing-fence" to "–ø–µ—Ä–∏–ª–∞",
        "red-traffic-light-pedestrian" to "–∫—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–∞",
        "snow" to "—Å–Ω–µ–≥",
        "steps-down" to "—Å—Ç—É–ø–µ–Ω–∏ –≤–Ω–∏–∑",
        "steps-up" to "—Å—Ç—É–ø–µ–Ω–∏ –≤–≤–µ—Ä—Ö",
        "zebra-marking" to "–∑–µ–±—Ä–∞ (—Ä–∞–∑–º–µ—Ç–∫–∞)"
    )

    companion object {
        private const val CONFIDENCE_THRESHOLD = 0.3f
        private const val IOU_THRESHOLD = 0.5f
    }
}

